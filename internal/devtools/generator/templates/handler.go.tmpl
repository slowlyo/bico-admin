package handler

import (
	"github.com/gin-gonic/gin"

	"bico-admin/internal/shared/models"
	"bico-admin/internal/admin/service"
	"bico-admin/internal/admin/types"
	sharedTypes "bico-admin/internal/shared/types"
	"bico-admin/pkg/response"
	"bico-admin/pkg/utils"
)

// {{.HandlerName}} {{.ModelName}}处理器
type {{.HandlerName}} struct {
	{{.ModelNameLower}}Service service.{{.ServiceInterface}}
}

// New{{.HandlerName}} 创建{{.ModelName}}处理器
func New{{.HandlerName}}({{.ModelNameLower}}Service service.{{.ServiceInterface}}) *{{.HandlerName}} {
	return &{{.HandlerName}}{
		{{.ModelNameLower}}Service: {{.ModelNameLower}}Service,
	}
}

// Create 创建{{.ModelName}}
func (h *{{.HandlerName}}) Create(c *gin.Context) {
	var req types.{{.CreateRequestName}}
	if err := c.ShouldBindJSON(&req); err != nil {
		response.ValidationError(c, err.Error())
		return
	}

	// 自定义验证
	if err := req.Validate(); err != nil {
		response.ValidationError(c, err.Error())
		return
	}

	// 调用服务层
	result, err := h.{{.ModelNameLower}}Service.Create(c.Request.Context(), &req)
	if err != nil {
		response.ErrorWithMessage(c, response.CodeInternalServerError, err.Error())
		return
	}

	// 转换响应
	responseData := h.convertToResponse(result)
	response.Success(c, responseData)
}

// GetByID 根据ID获取{{.ModelName}}
func (h *{{.HandlerName}}) GetByID(c *gin.Context) {
	var req sharedTypes.IDRequest
	if err := c.ShouldBindUri(&req); err != nil {
		response.ValidationError(c, err.Error())
		return
	}

	// 调用服务层
	entity, err := h.{{.ModelNameLower}}Service.GetByID(c.Request.Context(), req.ID)
	if err != nil {
		response.ErrorWithMessage(c, response.CodeNotFound, err.Error())
		return
	}

	// 转换响应
	responseData := h.convertToResponse(entity)
	response.Success(c, responseData)
}

// Update 更新{{.ModelName}}
func (h *{{.HandlerName}}) Update(c *gin.Context) {
	var uriReq sharedTypes.IDRequest
	if err := c.ShouldBindUri(&uriReq); err != nil {
		response.ValidationError(c, err.Error())
		return
	}

	var req types.{{.UpdateRequestName}}
	if err := c.ShouldBindJSON(&req); err != nil {
		response.ValidationError(c, err.Error())
		return
	}

	// 自定义验证
	if err := req.Validate(); err != nil {
		response.ValidationError(c, err.Error())
		return
	}

	// 调用服务层
	result, err := h.{{.ModelNameLower}}Service.Update(c.Request.Context(), uriReq.ID, &req)
	if err != nil {
		response.ErrorWithMessage(c, response.CodeInternalServerError, err.Error())
		return
	}

	// 转换响应
	responseData := h.convertToResponse(result)
	response.Success(c, responseData)
}

// Delete 删除{{.ModelName}}
func (h *{{.HandlerName}}) Delete(c *gin.Context) {
	var req sharedTypes.IDRequest
	if err := c.ShouldBindUri(&req); err != nil {
		response.ValidationError(c, err.Error())
		return
	}

	// 调用服务层
	if err := h.{{.ModelNameLower}}Service.Delete(c.Request.Context(), req.ID); err != nil {
		response.ErrorWithMessage(c, response.CodeInternalServerError, err.Error())
		return
	}

	response.Success(c, nil)
}

// List 获取{{.ModelName}}列表
func (h *{{.HandlerName}}) List(c *gin.Context) {
	var req types.{{.ListRequestName}}
	if err := c.ShouldBindQuery(&req); err != nil {
		response.ValidationError(c, err.Error())
		return
	}

	// 自定义验证
	if err := req.Validate(); err != nil {
		response.ValidationError(c, err.Error())
		return
	}

	// 调用服务层
	entities, total, err := h.{{.ModelNameLower}}Service.ListWithFilter(c.Request.Context(), &req)
	if err != nil {
		response.ErrorWithMessage(c, response.CodeInternalServerError, err.Error())
		return
	}

	// 转换响应
	var responses []types.{{.ResponseName}}
	for _, entity := range entities {
		responses = append(responses, h.convertToResponse(entity))
	}

	response.Page(c, responses, total, req.Page, req.PageSize)
}

{{- if hasStatusField .Fields }}
// UpdateStatus 更新{{.ModelName}}状态
func (h *{{.HandlerName}}) UpdateStatus(c *gin.Context) {
	var uriReq sharedTypes.IDRequest
	if err := c.ShouldBindUri(&uriReq); err != nil {
		response.ValidationError(c, err.Error())
		return
	}

	var req types.StatusRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		response.ValidationError(c, err.Error())
		return
	}

	enabled := req.Status == sharedTypes.StatusActive
	if err := h.{{.ModelNameLower}}Service.UpdateStatus(c.Request.Context(), uriReq.ID, enabled); err != nil {
		response.ErrorWithMessage(c, response.CodeInternalServerError, err.Error())
		return
	}

	response.Success(c, nil)
}
{{- end }}

// convertToResponse 转换为响应格式
func (h *{{.HandlerName}}) convertToResponse(entity *models.{{.ModelName}}) types.{{.ResponseName}} {
{{- if hasPointerStatusField .Fields }}
	status := 0
	if entity.Status != nil {
		status = *entity.Status
	}
{{- end }}

	return types.{{.ResponseName}}{
		ID: entity.ID,
{{- range .Fields }}
{{- if eq .Name "Status" }}
	{{- if eq .Type "int" }}
		{{.Name}}: entity.{{.Name}},
		StatusText: h.getStatusText(entity.{{.Name}}),
	{{- else }}
		{{.Name}}: status,
		StatusText: h.getStatusText(status),
	{{- end }}
{{- else if contains .Type "*time.Time" }}
		{{.Name}}: h.formatTime(entity.{{.Name}}),
{{- else }}
		{{.Name}}: entity.{{.Name}},
{{- end }}
{{- end }}
		CreatedAt: utils.NewFormattedTime(entity.CreatedAt),
		UpdatedAt: utils.NewFormattedTime(entity.UpdatedAt),
	}
}

// getStatusText 获取状态文本
func (h *{{.HandlerName}}) getStatusText(status int) string {
{{- if hasStatusField .Fields }}
	switch status {
	case sharedTypes.StatusActive:
		return "启用"
	case sharedTypes.StatusInactive:
		return "禁用"
	case sharedTypes.StatusDeleted:
		return "已删除"
	default:
		return "未知"
	}
{{- else }}
	return "正常"
{{- end }}
}

{{- if .HasTimeField }}
// formatTime 格式化时间
func (h *{{.HandlerName}}) formatTime(t *time.Time) *utils.FormattedTime {
	if t == nil {
		return nil
	}
	ft := utils.NewFormattedTime(*t)
	return &ft
}
{{- end }}
