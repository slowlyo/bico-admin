<template>
  <ElDialog
    v-model="dialogVisible"
    :title="dialogTitle"
    width="600px"
    align-center
  >
    <ElForm ref="formRef" :model="formData" :rules="rules" label-width="100px">
      <ElRow :gutter="20">
{{range .FormFields}}        <ElCol :span="{{.ColSpan}}">
          <ElFormItem label="{{.Label}}" prop="{{.Prop}}">
{{if eq .Type "textarea"}}            <ElInput
              v-model="formData.{{.Prop}}"
              type="textarea"
              :rows="4"
              placeholder="{{.Placeholder}}"
            />
{{else if eq .Type "password"}}            <ElInput
              v-model="formData.{{.Prop}}"
              type="password"
              placeholder="{{.Placeholder}}"
              show-password
            />
{{else if eq .Type "email"}}            <ElInput
              v-model="formData.{{.Prop}}"
              type="email"
              placeholder="{{.Placeholder}}"
            />
{{else if eq .Type "number"}}            <ElInputNumber
              v-model="formData.{{.Prop}}"
              :min="0"
              :precision="2"
              placeholder="{{.Placeholder}}"
              style="width: 100%"
            />
{{else if eq .Type "select"}}            <ElSelect
              v-model="formData.{{.Prop}}"
              placeholder="{{.Placeholder}}"
              style="width: 100%"
            >
{{range .Options}}              <ElOption
                label="{{.Label}}"
                :value="{{.Value}}"
              />
{{end}}            </ElSelect>
{{else if eq .Type "switch"}}            <ElSwitch
              v-model="formData.{{.Prop}}"
              active-text="启用"
              inactive-text="禁用"
            />
{{else if eq .Type "date"}}            <ElDatePicker
              v-model="formData.{{.Prop}}"
              type="date"
              placeholder="{{.Placeholder}}"
              style="width: 100%"
            />
{{else if eq .Type "datetime"}}            <ElDatePicker
              v-model="formData.{{.Prop}}"
              type="datetime"
              placeholder="{{.Placeholder}}"
              style="width: 100%"
            />
{{else}}            <ElInput
              v-model="formData.{{.Prop}}"
              placeholder="{{.Placeholder}}"
            />
{{end}}          </ElFormItem>
        </ElCol>
{{end}}      </ElRow>
    </ElForm>

    <template #footer>
      <div class="dialog-footer">
        <ElButton @click="handleClose">取消</ElButton>
        <ElButton
          type="primary"
          :loading="submitLoading"
          @click="handleSubmit"
        >
          确定
        </ElButton>
      </div>
    </template>
  </ElDialog>
</template>

<script setup lang="ts">
  import { reactive, ref, computed, watch, nextTick } from 'vue'
  import { ElMessage, type FormInstance, type FormRules } from 'element-plus'
  import { {{.ServiceName}}, type {{.TypeNamespace}} } from '{{.APIImportPath}}'

  interface Props {
    visible: boolean
    type: Form.DialogType
    {{.ModelNameKebab}}Data?: {{.TypeNamespace}}.{{.ModelName}}Info
  }

  interface Emits {
    (e: 'update:visible', value: boolean): void
    (e: 'submit'): void
  }

  const props = defineProps<Props>()
  const emit = defineEmits<Emits>()

  const submitLoading = ref(false)

  // 对话框显示控制
  const dialogVisible = computed({
    get: () => props.visible,
    set: (value) => emit('update:visible', value)
  })

  const dialogType = computed(() => props.type)

  // 表单实例
  const formRef = ref<FormInstance>()

  // 表单数据
  const formData = reactive<{{.TypeNamespace}}.{{.ModelName}}CreateRequest>({
{{range .FormFields}}{{if ne .Type "switch"}}    {{.Prop}}: {{if eq .Type "number"}}0{{else if eq .Type "select"}}{{if .Options}}{{(index .Options 0).Value}}{{else}}''{{end}}{{else}}''{{end}},
{{else}}    {{.Prop}}: true,
{{end}}{{end}}  })

  // 表单验证规则
  const rules: FormRules = {
{{range .ValidationRules}}    {{.Field}}: [
      {{.Rules}}
    ],
{{end}}  }

  // 对话框标题
  const dialogTitle = computed(() => {
    return props.type === 'add' ? '新增{{.ModelNameChinese}}' : '编辑{{.ModelNameChinese}}'
  })

  // 初始化表单数据
  const initFormData = () => {
    const isEdit = props.type === 'edit' && props.{{.ModelNameKebab}}Data
    const row = props.{{.ModelNameKebab}}Data

    if (isEdit && row) {
      Object.assign(formData, {
{{range .FormFields}}        {{.Prop}}: row.{{.Prop}} || {{if eq .Type "number"}}0{{else if eq .Type "switch"}}false{{else}}''{{end}},
{{end}}      })
    } else {
      // 重置为初始值
      Object.assign(formData, {
{{range .FormFields}}        {{.Prop}}: {{if eq .Type "number"}}0{{else if eq .Type "switch"}}true{{else if eq .Type "select"}}{{if .Options}}{{(index .Options 0).Value}}{{else}}''{{end}}{{else}}''{{end}},
{{end}}      })
    }
  }

  // 监听弹窗显示状态
  watch(
    () => props.visible,
    (visible) => {
      if (visible) {
        nextTick(() => {
          initFormData()
        })
      }
    },
    { immediate: true }
  )

  // 关闭对话框
  const handleClose = () => {
    emit('update:visible', false)
  }

  // 提交表单
  const handleSubmit = async () => {
    if (!formRef.value) return

    try {
      await formRef.value.validate()
      submitLoading.value = true

      if (props.type === 'add') {
        // 新增
        const createData = { ...formData } as {{.TypeNamespace}}.{{.ModelName}}CreateRequest
        await {{.ServiceName}}.create{{.ModelName}}(createData)
        ElMessage.success('新增成功')
      } else {
        // 编辑
        if (!props.{{.ModelNameKebab}}Data?.id) {
          ElMessage.error('缺少必要参数')
          return
        }
        const updateData = { ...formData } as {{.TypeNamespace}}.{{.ModelName}}UpdateRequest
        await {{.ServiceName}}.update{{.ModelName}}(props.{{.ModelNameKebab}}Data.id, updateData)
        ElMessage.success('更新成功')
      }

      emit('submit')
      handleClose()
    } catch (error) {
      console.error('提交失败:', error)
    } finally {
      submitLoading.value = false
    }
  }
</script>

<style scoped>
.dialog-footer {
  text-align: right;
}
</style>
