<!-- {{.ModelNameChinese}}管理 -->
<!-- art-full-height 自动计算出页面剩余高度 -->
<!-- art-table-card 一个符合系统样式的 class，同时自动撑满剩余高度 -->
<template>
  <div class="{{.ModelNameKebab}}-page art-full-height">
    <!-- 搜索栏 -->
    <ArtSearchBar
      v-model:filter="searchForm"
      :items="searchItems"
      @reset="handleSearchReset"
      @search="handleSearchSubmit"
    />

    <ElCard class="art-table-card" shadow="never">
      <!-- 表格头部 -->
      <ArtTableHeader v-model:columns="columnChecks" @refresh="refresh">
        <template #left>
          <ElButton
            v-if="hasAuth('create')"
            type="primary"
            @click="showDialog('add')"
          >
            新建{{.ModelNameChinese}}
          </ElButton>
        </template>
      </ArtTableHeader>

      <!-- 表格 -->
      <ArtTable
        :loading="loading"
        :data="data"
        :columns="columns"
        :pagination="pagination"
        :table-config="{ rowKey: 'id' }"
        :layout="{ marginTop: 10 }"
        @row:selection-change="handleSelectionChange"
        @pagination:size-change="handleSizeChange"
        @pagination:current-change="handleCurrentChange"
        @sort:change="handleSortChange"
      >
      </ArtTable>

      <!-- {{.ModelNameChinese}}弹窗 -->
      <{{.ModelName}}Dialog
        v-model:visible="dialogVisible"
        :type="dialogType"
        :{{.ModelNameLower}}-data="current{{.ModelName}}Data"
        @submit="handleDialogSubmit"
      />
    </ElCard>
  </div>
</template>

<script setup lang="ts">
  import ArtButtonTable from '@/components/core/forms/art-button-table/index.vue'
  import { useTable } from '@/composables/useTable'
  import { useAuth } from '@/composables/useAuth'
  import { {{.ServiceName}}, type {{.TypeNamespace}} } from '{{.APIImportPath}}'
  import {{.ModelName}}Dialog from './modules/{{.ModelNameKebab}}-dialog.vue'
  import { ElMessage, ElMessageBox, ElSwitch } from 'element-plus'
  import type { ColumnOption, SearchFormItem } from '@/types/component'

  defineOptions({ name: '{{.ModelName}}' })

  // 权限检查
  const { hasAuth, hasAnyAuth } = useAuth('{{.ModelNameSnake}}')

  type {{.ModelName}}Info = {{.TypeNamespace}}.{{.ModelName}}Info
  const { get{{.ModelName}}List } = {{.ServiceName}}

  // 弹窗相关
  const dialogType = ref<Form.DialogType>('add')
  const dialogVisible = ref(false)
  const current{{.ModelName}}Data = ref<{{.ModelName}}Info | undefined>(undefined)

  // 选中行
  const selectedRows = ref<{{.ModelName}}Info[]>([])

  // 搜索表单
  const searchForm = ref({
{{range .SearchFormFields}}    {{.Prop}}: {{.DefaultValue}},
{{end}}  })

  // 搜索配置项
  const searchItems = computed<SearchFormItem[]>(() => [
{{range .SearchFormItems}}    {
      label: '{{.Label}}',
      prop: '{{.Prop}}',
      type: '{{.Type}}',
      config: {
        clearable: true,
        placeholder: '{{.Placeholder}}'
      }{{if .Options}},
      options: () => [{{range .Options}}
        { label: '{{.Label}}', value: {{.Value}} },{{end}}
      ]{{end}}
    },
{{end}}  ])

  // 重置搜索
  const handleSearchReset = () => {
    resetSearchParams()
  }

  // 执行搜索
  const handleSearchSubmit = () => {
    console.log('搜索表单数据:', searchForm.value)
    handleSearch(searchForm.value)
  }

  const {
    columns,
    columnChecks,
    tableData: data,
    isLoading: loading,
    paginationState: pagination,
    searchState: searchParams,
    searchData: getDataByPage,
    resetSearch: resetSearchParams,
    onPageSizeChange: handleSizeChange,
    onCurrentPageChange: handleCurrentChange,
    refreshAll: refresh,
    refreshAfterCreate: refreshAfterAdd,
    refreshAfterUpdate: refreshAfterEdit,
    refreshAfterRemove: refreshAfterDelete
  } = useTable<{{.ModelName}}Info>({
    // 核心配置
    core: {
      apiFn: get{{.ModelName}}List,
      apiParams: {
        page: 1,
        page_size: 20,
{{range .SearchFormFields}}        {{.Prop}}: {{.DefaultValue}},
{{end}}        sort_by: '',
        sort_desc: false
      },
      // 配置分页字段映射
      paginationKey: {
        current: 'page',
        size: 'page_size'
      },
      columnsFactory: () => {
        const columns: ColumnOption<{{.ModelName}}Info>[] = [
{{range .TableColumns}}          {
            prop: '{{.Prop}}',
            label: '{{.Label}}'{{if .Width}},
            width: {{.Width}}{{end}}{{if .Sortable}},
            sortable: true{{end}}{{if eq .Formatter "timeFormatter"}},
            minWidth: 160{{end}}
          },
{{end}}        ]

        // 只有在有编辑或删除权限时才添加操作列
        if (hasAnyAuth(['update', 'delete'])) {
          columns.push({
            prop: 'operation',
            label: '操作',
            width: 120,
            fixed: 'right',
            formatter: (row: {{.ModelName}}Info) => {
              const buttons = []

              // 编辑按钮
              if (hasAuth('update')) {
                buttons.push(h(ArtButtonTable, {
                  type: 'edit',
                  onClick: () => showDialog('edit', row)
                }))
              }

              // 删除按钮
              if (hasAuth('delete')) {
                buttons.push(h(ArtButtonTable, {
                  type: 'delete',
                  disabled: !row.can_delete,
                  onClick: () => delete{{.ModelName}}(row)
                }))
              }

              return h('div', buttons)
            }
          })
        }

        return columns
      }
    },
    // 数据处理
    transform: {
      // 响应数据适配器
      responseAdapter: (response: any) => {
        if (response && response.list) {
          return {
            records: response.list || [],
            total: response.total || 0,
            current: response.page || 1,
            size: response.page_size || 20
          }
        }
        return { records: [], total: 0, current: 1, size: 20 }
      },
      // 数据转换器
      dataTransformer: (records: any) => {
        if (!Array.isArray(records)) {
          return []
        }
        return records
      }
    },
    // 性能优化
    performance: {
      enableCache: true,
      cacheTime: 10 * 60 * 1000
    },
  })

  /**
   * 显示{{.ModelNameChinese}}弹窗
   */
  const showDialog = (type: Form.DialogType, row?: {{.ModelName}}Info): void => {
    dialogType.value = type
    current{{.ModelName}}Data.value = row
    nextTick(() => {
      dialogVisible.value = true
    })
  }

  /**
   * 删除{{.ModelNameChinese}}
   */
  const delete{{.ModelName}} = (row: {{.ModelName}}Info): void => {
    ElMessageBox.confirm(`确定要删除{{.ModelNameChinese}} "${row.name || row.id}" 吗？`, '删除{{.ModelNameChinese}}', {
      confirmButtonText: '确定',
      cancelButtonText: '取消',
      type: 'warning'
    }).then(async () => {
      try {
        await {{.ServiceName}}.delete{{.ModelName}}(row.id)
        ElMessage.success('删除成功')
        refreshAfterDelete()
      } catch (error) {
        ElMessage.error('删除失败请重试！')
      }
    }).catch(() => {
      // 用户取消删除
    })
  }

  /**
   * 处理弹窗提交事件
   */
  const handleDialogSubmit = async () => {
    try {
      dialogVisible.value = false
      await (dialogType.value === 'add' ? refreshAfterAdd() : refreshAfterEdit())
      current{{.ModelName}}Data.value = undefined
    } catch (error) {
    }
  }

  /**
   * 处理表格行选择变化
   */
  const handleSelectionChange = (selection: {{.ModelName}}Info[]): void => {
    selectedRows.value = selection
  }

  /**
   * 处理搜索事件
   */
  const handleSearch = (searchFormData: any): void => {
    Object.assign(searchParams, searchFormData)
    getDataByPage()
  }

  /**
   * 处理表格排序变化
   */
  const handleSortChange = (sortInfo: any): void => {
    if (sortInfo.prop && sortInfo.order) {
      const sortDesc = sortInfo.order === 'descending'
      Object.assign(searchParams, {
        sort_by: sortInfo.prop,
        sort_desc: sortDesc
      })
      getDataByPage()
    } else {
      Object.assign(searchParams, {
        sort_by: '',
        sort_desc: false
      })
      getDataByPage()
    }
  }
</script>

<style lang="scss" scoped>
  .{{.ModelNameKebab}}-page {
    // 页面特定样式
  }
</style>
