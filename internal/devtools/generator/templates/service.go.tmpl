package service

import (
	"context"
	"errors"

	"bico-admin/internal/admin/repository"
	"bico-admin/internal/admin/types"
	"bico-admin/internal/shared/models"
)

// {{.ModelName}}Service {{.ModelName}}服务接口
type {{.ModelName}}Service interface {
	GetByID(ctx context.Context, id uint) (*models.{{.ModelName}}, error)
	Create(ctx context.Context, req *types.{{.CreateRequestName}}) (*models.{{.ModelName}}, error)
	Update(ctx context.Context, id uint, req *types.{{.UpdateRequestName}}) (*models.{{.ModelName}}, error)
	Delete(ctx context.Context, id uint) error
{{- if .HasStatusField }}
	UpdateStatus(ctx context.Context, id uint, status int) error
{{- end }}
	ListWithFilter(ctx context.Context, req *types.{{.ListRequestName}}) ([]*models.{{.ModelName}}, int64, error)
}

// {{.ModelNameLower}}Service {{.ModelName}}服务实现
type {{.ModelNameLower}}Service struct {
	{{.ModelNameLower}}Repo repository.{{.ModelName}}Repository
}

// New{{.ModelName}}Service 创建{{.ModelName}}服务
func New{{.ModelName}}Service({{.ModelNameLower}}Repo repository.{{.ModelName}}Repository) {{.ModelName}}Service {
	return &{{.ModelNameLower}}Service{
		{{.ModelNameLower}}Repo: {{.ModelNameLower}}Repo,
	}
}

// GetByID 根据ID获取{{.ModelName}}
func (s *{{.ModelNameLower}}Service) GetByID(ctx context.Context, id uint) (*models.{{.ModelName}}, error) {
	return s.{{.ModelNameLower}}Repo.GetByID(ctx, id)
}

// ListWithFilter 根据过滤条件分页查询{{.ModelName}}
func (s *{{.ModelNameLower}}Service) ListWithFilter(ctx context.Context, req *types.{{.ListRequestName}}) ([]*models.{{.ModelName}}, int64, error) {
	// 转换为基础分页查询
	baseQuery := &req.BasePageQuery

	// 调用Repository获取数据
	return s.{{.ModelNameLower}}Repo.ListWithFilter(ctx, baseQuery)
}

// Create 创建{{.ModelName}}
func (s *{{.ModelNameLower}}Service) Create(ctx context.Context, req *types.{{.CreateRequestName}}) (*models.{{.ModelName}}, error) {
	// 转换请求为实体
	entity := &models.{{.ModelName}}{
{{- range .Fields }}
		{{printf "%-12s" (printf "%s:" (ToPascalCase .Name))}}req.{{ToPascalCase .Name}},
{{- end }}
	}

	// 业务验证
	if err := s.validate{{.ModelName}}(ctx, entity); err != nil {
		return nil, err
	}

	// 调用Repository创建
	if err := s.{{.ModelNameLower}}Repo.Create(ctx, entity); err != nil {
		return nil, err
	}

	return entity, nil
}

// Update 更新{{.ModelName}}
func (s *{{.ModelNameLower}}Service) Update(ctx context.Context, id uint, req *types.{{.UpdateRequestName}}) (*models.{{.ModelName}}, error) {
	// 先获取现有实体
	entity, err := s.{{.ModelNameLower}}Repo.GetByID(ctx, id)
	if err != nil {
		return nil, err
	}

	// 更新字段
{{- range .Fields }}
	{{printf "entity.%-12s" (ToPascalCase .Name)}}= req.{{ToPascalCase .Name}}
{{- end }}

	// 业务验证
	if err := s.validate{{.ModelName}}(ctx, entity); err != nil {
		return nil, err
	}

	// 调用Repository更新
	if err := s.{{.ModelNameLower}}Repo.Update(ctx, entity); err != nil {
		return nil, err
	}

	return entity, nil
}

// Delete 删除{{.ModelName}}
func (s *{{.ModelNameLower}}Service) Delete(ctx context.Context, id uint) error {
	// 检查是否可以删除
	if err := s.validateDelete{{.ModelName}}(ctx, id); err != nil {
		return err
	}

	// 调用Repository删除
	return s.{{.ModelNameLower}}Repo.Delete(ctx, id)
}

{{- if .HasStatusField }}
// UpdateStatus 更新{{.ModelName}}状态
func (s *{{.ModelNameLower}}Service) UpdateStatus(ctx context.Context, id uint, status int) error {
	// 检查是否可以更新状态
	if err := s.validateStatusUpdate{{.ModelName}}(ctx, id, status); err != nil {
		return err
	}

	// 获取实体并更新状态
	entity, err := s.{{.ModelNameLower}}Repo.GetByID(ctx, id)
	if err != nil {
		return err
	}

	// 根据状态字段类型设置值
{{- range .Fields }}
{{- if isStatusField . }}
	{{- $statusType := getStatusFieldType . }}
	{{- if eq $statusType 1 }}
	// bool类型状态字段
	entity.{{.Name}} = status == 1
	{{- else if eq $statusType 2 }}
	// int类型状态字段
	entity.{{.Name}} = status
	{{- else if eq $statusType 3 }}
	// *bool类型状态字段
	boolStatus := status == 1
	entity.{{.Name}} = &boolStatus
	{{- else if eq $statusType 4 }}
	// *int类型状态字段
	entity.{{.Name}} = &status
	{{- end }}
{{- end }}
{{- end }}

	return s.{{.ModelNameLower}}Repo.Update(ctx, entity)
}
{{- end }}

// validate{{.ModelName}} 验证{{.ModelName}}实体
func (s *{{.ModelNameLower}}Service) validate{{.ModelName}}(_ context.Context, entity *models.{{.ModelName}}) error {
	if entity == nil {
		return errors.New("{{.ModelName}}实体不能为空")
	}

	// TODO: 添加具体的业务验证逻辑
	// 例如：
	// - 检查必填字段
	// - 验证字段格式
	// - 检查业务规则
	// - 验证唯一性约束

	return nil
}

// validateDelete{{.ModelName}} 验证{{.ModelName}}删除条件
func (s *{{.ModelNameLower}}Service) validateDelete{{.ModelName}}(_ context.Context, _ uint) error {
	// TODO: 添加删除前的业务验证逻辑
	// 例如：
	// - 检查是否有关联数据
	// - 验证删除权限
	// - 检查业务状态

	return nil
}

{{- if .HasStatusField }}
// validateStatusUpdate{{.ModelName}} 验证{{.ModelName}}状态更新条件
func (s *{{.ModelNameLower}}Service) validateStatusUpdate{{.ModelName}}(_ context.Context, _ uint, _ int) error {
	// TODO: 添加状态更新前的业务验证逻辑
	// 例如：
	// - 检查状态转换是否合法
	// - 验证更新权限
	// - 检查业务条件

	return nil
}
{{- end }}
