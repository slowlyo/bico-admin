package types

import (
{{- if .HasTimeField }}
	"time"
{{- end }}

	"bico-admin/internal/shared/types"
	"bico-admin/pkg/utils"
)

// {{.CreateRequestName}} 创建{{.ModelName}}请求
type {{.CreateRequestName}} struct {
{{- range .Fields }}
	{{.Name}} {{.Type}} `json:"{{.JsonTag}}"{{getValidationTag .}}`{{if .Comment}} // {{.Comment}}{{end}}
{{- end }}
}

// {{.UpdateRequestName}} 更新{{.ModelName}}请求
type {{.UpdateRequestName}} struct {
{{- range .Fields }}
	{{.Name}} {{.Type}} `json:"{{.JsonTag}}"{{getValidationTag .}}`{{if .Comment}} // {{.Comment}}{{end}}
{{- end }}
}

// {{.ListRequestName}} {{.ModelName}}列表请求
type {{.ListRequestName}} struct {
	types.BasePageQuery
{{- range .Fields }}
{{- if or (eq .Type "string") (eq .Type "*string") }}
	{{.Name}} string `form:"{{.JsonTag}}" json:"{{.JsonTag}}"` // {{.Comment}}筛选
{{- else if or (eq .Type "int") (eq .Type "*int") (eq .Name "Status") }}
	{{.Name}} *int `form:"{{.JsonTag}}" json:"{{.JsonTag}}"` // {{.Comment}}筛选
{{- end }}
{{- end }}
}

// {{.ResponseName}} {{.ModelName}}响应
type {{.ResponseName}} struct {
	ID uint `json:"id"`
{{- range .Fields }}
{{- if eq .Name "Status" }}
	{{.Name}}     int    `json:"{{.JsonTag}}"`
	StatusText string `json:"status_text"`
{{- else if contains .Type "time.Time" }}
	{{.Name}} *utils.FormattedTime `json:"{{.JsonTag}}"`
{{- else }}
	{{.Name}} {{.Type}} `json:"{{.JsonTag}}"`
{{- end }}
{{- if .Comment }}
	// {{.Comment}}
{{- end }}
{{- end }}
{{- if not (hasStatusField .Fields) }}
	Status     int    `json:"status"`
	StatusText string `json:"status_text"`
{{- end }}
	CreatedAt utils.FormattedTime `json:"created_at"`
	UpdatedAt utils.FormattedTime `json:"updated_at"`
}

// {{.ModelName}}OptionResponse {{.ModelName}}选项响应（用于下拉选择）
type {{.ModelName}}OptionResponse struct {
	ID    uint   `json:"id"`
{{- range .Fields }}
{{- if or (eq .Name "Name") (eq .Name "Title") (eq .Name "Label") }}
	{{.Name}} {{.Type}} `json:"{{.JsonTag}}"`
{{- end }}
{{- end }}
{{- range .Fields }}
{{- if eq .Name "Description" }}
	Description {{.Type}} `json:"description"`
{{- end }}
{{- end }}
}

// Validate{{.CreateRequestName}} 验证创建请求
func (req *{{.CreateRequestName}}) Validate() error {
	// TODO: 添加自定义验证逻辑
	return nil
}

// Validate{{.UpdateRequestName}} 验证更新请求
func (req *{{.UpdateRequestName}}) Validate() error {
	// TODO: 添加自定义验证逻辑
	return nil
}

// Validate{{.ListRequestName}} 验证列表请求
func (req *{{.ListRequestName}}) Validate() error {
	// 验证分页参数
	if req.Page <= 0 {
		req.Page = 1
	}
	if req.PageSize <= 0 {
		req.PageSize = 10
	}
	if req.PageSize > 100 {
		req.PageSize = 100
	}

	// TODO: 添加自定义验证逻辑
	return nil
}
