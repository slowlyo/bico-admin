// Code generated by bico-admin code generator. DO NOT EDIT.
// Generated at: 2025-07-18 16:06:30

package admin

import (
	"github.com/google/wire"
	"gorm.io/gorm"
	"internal/admin/repository"
	"internal/admin/service"
	"internal/admin/handler"
)


// CompleteTestModelProviderRegistrar CompleteTestModel Provider 注册器
type CompleteTestModelProviderRegistrar struct{}

// GetProviders 实现 ProviderRegistrar 接口
func (r *CompleteTestModelProviderRegistrar) GetProviders() []interface{} {
	return []interface{}{
		ProvideCompleteTestModelRepository,
		ProvideCompleteTestModelService,
		ProvideCompleteTestModelHandler,
	}
}

// ProvideCompleteTestModelRepository 提供CompleteTestModel Repository
func ProvideCompleteTestModelRepository(db *gorm.DB) repository.CompleteTestModelRepository {
	return repository.NewCompleteTestModelRepository(db)
}

// ProvideCompleteTestModelService 提供CompleteTestModel Service
func ProvideCompleteTestModelService(repo repository.CompleteTestModelRepository) service.CompleteTestModelService {
	return service.NewCompleteTestModelService(repo)
}

// ProvideCompleteTestModelHandler 提供CompleteTestModel Handler
func ProvideCompleteTestModelHandler(svc service.CompleteTestModelService) *handler.CompleteTestModelHandler {
	return handler.NewCompleteTestModelHandler(svc)
}

// CompleteTestModelProviderSet CompleteTestModel Provider 集合
var CompleteTestModelProviderSet = wire.NewSet(
	ProvideCompleteTestModelRepository,
	ProvideCompleteTestModelService,
	ProvideCompleteTestModelHandler,
)

// OrderProviderRegistrar Order Provider 注册器
type OrderProviderRegistrar struct{}

// GetProviders 实现 ProviderRegistrar 接口
func (r *OrderProviderRegistrar) GetProviders() []interface{} {
	return []interface{}{
		ProvideOrderRepository,
		ProvideOrderService,
		ProvideOrderHandler,
	}
}

// ProvideOrderRepository 提供Order Repository
func ProvideOrderRepository(db *gorm.DB) repository.OrderRepository {
	return repository.NewOrderRepository(db)
}

// ProvideOrderService 提供Order Service
func ProvideOrderService(repo repository.OrderRepository) service.OrderService {
	return service.NewOrderService(repo)
}

// ProvideOrderHandler 提供Order Handler
func ProvideOrderHandler(svc service.OrderService) *handler.OrderHandler {
	return handler.NewOrderHandler(svc)
}

// OrderProviderSet Order Provider 集合
var OrderProviderSet = wire.NewSet(
	ProvideOrderRepository,
	ProvideOrderService,
	ProvideOrderHandler,
)

// UserProviderRegistrar User Provider 注册器
type UserProviderRegistrar struct{}

// GetProviders 实现 ProviderRegistrar 接口
func (r *UserProviderRegistrar) GetProviders() []interface{} {
	return []interface{}{
		ProvideUserRepository,
		ProvideUserService,
		ProvideUserHandler,
	}
}

// ProvideUserRepository 提供User Repository
func ProvideUserRepository(db *gorm.DB) repository.UserRepository {
	return repository.NewUserRepository(db)
}

// ProvideUserService 提供User Service
func ProvideUserService(repo repository.UserRepository) service.UserService {
	return service.NewUserService(repo)
}

// ProvideUserHandler 提供User Handler
func ProvideUserHandler(svc service.UserService) *handler.UserHandler {
	return handler.NewUserHandler(svc)
}

// UserProviderSet User Provider 集合
var UserProviderSet = wire.NewSet(
	ProvideUserRepository,
	ProvideUserService,
	ProvideUserHandler,
)

// ArticleProviderRegistrar Article Provider 注册器
type ArticleProviderRegistrar struct{}

// GetProviders 实现 ProviderRegistrar 接口
func (r *ArticleProviderRegistrar) GetProviders() []interface{} {
	return []interface{}{
		ProvideArticleRepository,
		ProvideArticleService,
		ProvideArticleHandler,
	}
}

// ProvideArticleRepository 提供Article Repository
func ProvideArticleRepository(db *gorm.DB) repository.ArticleRepository {
	return repository.NewArticleRepository(db)
}

// ProvideArticleService 提供Article Service
func ProvideArticleService(repo repository.ArticleRepository) service.ArticleService {
	return service.NewArticleService(repo)
}

// ProvideArticleHandler 提供Article Handler
func ProvideArticleHandler(svc service.ArticleService) *handler.ArticleHandler {
	return handler.NewArticleHandler(svc)
}

// ArticleProviderSet Article Provider 集合
var ArticleProviderSet = wire.NewSet(
	ProvideArticleRepository,
	ProvideArticleService,
	ProvideArticleHandler,
)

// FieldTypesTestProviderRegistrar FieldTypesTest Provider 注册器
type FieldTypesTestProviderRegistrar struct{}

// GetProviders 实现 ProviderRegistrar 接口
func (r *FieldTypesTestProviderRegistrar) GetProviders() []interface{} {
	return []interface{}{
		ProvideFieldTypesTestRepository,
		ProvideFieldTypesTestService,
		ProvideFieldTypesTestHandler,
	}
}

// ProvideFieldTypesTestRepository 提供FieldTypesTest Repository
func ProvideFieldTypesTestRepository(db *gorm.DB) repository.FieldTypesTestRepository {
	return repository.NewFieldTypesTestRepository(db)
}

// ProvideFieldTypesTestService 提供FieldTypesTest Service
func ProvideFieldTypesTestService(repo repository.FieldTypesTestRepository) service.FieldTypesTestService {
	return service.NewFieldTypesTestService(repo)
}

// ProvideFieldTypesTestHandler 提供FieldTypesTest Handler
func ProvideFieldTypesTestHandler(svc service.FieldTypesTestService) *handler.FieldTypesTestHandler {
	return handler.NewFieldTypesTestHandler(svc)
}

// FieldTypesTestProviderSet FieldTypesTest Provider 集合
var FieldTypesTestProviderSet = wire.NewSet(
	ProvideFieldTypesTestRepository,
	ProvideFieldTypesTestService,
	ProvideFieldTypesTestHandler,
)


// init 自动注册所有 Provider
func init() {
	// 注册CompleteTestModel Provider
	completetestmodelProviderRegistrar := &CompleteTestModelProviderRegistrar{}
	RegisterProviderRegistrar(completetestmodelProviderRegistrar)
	// 注册Order Provider
	orderProviderRegistrar := &OrderProviderRegistrar{}
	RegisterProviderRegistrar(orderProviderRegistrar)
	// 注册User Provider
	userProviderRegistrar := &UserProviderRegistrar{}
	RegisterProviderRegistrar(userProviderRegistrar)
	// 注册Article Provider
	articleProviderRegistrar := &ArticleProviderRegistrar{}
	RegisterProviderRegistrar(articleProviderRegistrar)
	// 注册FieldTypesTest Provider
	fieldtypestestProviderRegistrar := &FieldTypesTestProviderRegistrar{}
	RegisterProviderRegistrar(fieldtypestestProviderRegistrar)
}

// GeneratedProviderSet 生成的 Provider 集合
// 可以在 wire.Build 中使用这个 ProviderSet
var GeneratedProviderSet = wire.NewSet(
	CompleteTestModelProviderSet,
	OrderProviderSet,
	UserProviderSet,
	ArticleProviderSet,
	FieldTypesTestProviderSet,
)
